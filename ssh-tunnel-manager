#!/bin/zsh
export SSH_TUNNEL_MGR_VERSION="v1.1.0"

if [[ $(uname -m) == 'arm64' ]]; then
    export PATH="/opt/homebrew/bin:$PATH"
    export SSH_ASKPASS=/opt/homebrew/bin/ssh-askpass
    export SSH_TUNNEL_MGR_CPU_MODE="Apple silicon"
else
    export PATH="/usr/local/bin:$PATH"
    export SSH_ASKPASS=/usr/local/bin/ssh-askpass
    export SSH_TUNNEL_MGR_CPU_MODE="Intel silicon"
fi

export SSH_ASKPASS_REQUIRE=force

if [ -S ~/.ssh/agent ]; then
    export SSH_AUTH_SOCK=~/.ssh/agent
fi

current_script=$(realpath "$0")

config_dir="$HOME/ssh-tunnels"

ssh_arguments="24afnxNT"

quoteRe() { sed -e 's/[^^]/[&]/g; s/\^/\\^/g; $!a\'$'\n''\\n' <<<"$1" | tr -d '\n'; }

get_tunnel_identifier() {
    local config_file="$1"
    local tunnel_name="$2"

    local tunnel_data=$(jq -r ".\"$tunnel_name\"" "$config_file")

    local tunnel_type=$(echo "$tunnel_data" | jq -r '.tunnel_type')
    if [ "$tunnel_type" = "multiple" ]; then
        local tunnel_options=$(echo "$tunnel_data" | jq -r '.tunnel_options[]')#
        local tunnel_options_array=()
        while IFS= read -r line; do
            tunnel_options_array+=("$line")
        done <<< "$tunnel_options"
        local tunnel_identifier_prefix=$(quoteRe "${tunnel_options_array[@]}")
        local tunnel_identifier="${tunnel_identifier_prefix}[ ]+"
    else
        local localport=$(echo "$tunnel_data" | jq -r '.localport')
        local tunnel_identifier_prefix=$(quoteRe "localhost:${localport}")
        local tunnel_identifier="${tunnel_identifier_prefix}[ :]+"
    fi

    echo "$tunnel_identifier"
}

start_tunnel() {

    killall 'System Events'

    local config_file="$1"
    local tunnel_name="$2"

    # Load config data from the specified file and tunnel
    local tunnel_data=$(jq -r ".\"$tunnel_name\"" "$config_file")
    local host=$(echo "$tunnel_data" | jq -r '.host')
    local user=$(echo "$tunnel_data" | jq -r '.user')
    local port=$(echo "$tunnel_data" | jq -r '.port')
    local identity=$(echo "$tunnel_data" | jq -r '.identity')
    local tunnel_type=$(echo "$tunnel_data" | jq -r '.tunnel_type')
    local autoconnect=$(echo "$tunnel_data" | jq -r '.autoconnect')
    local localport=$(echo "$tunnel_data" | jq -r '.localport')
    local options=$(echo "$tunnel_data" | jq -r '.options[]')
    local tunnel_options=$(echo "$tunnel_data" | jq -r '.tunnel_options[]')
    local loopback_aliases=$(echo "$tunnel_data" | jq -r '.loopback_aliases[]')

    local options_array=()
    while IFS= read -r line; do
        options_array+=("$line")
    done <<< "$options"

    local tunnel_options_array=()
    while IFS= read -r line; do
        tunnel_options_array+=("$line")
    done <<< "$tunnel_options"

    local loopback_aliases_array=()
    while IFS= read -r line; do
        if [ -n "$line" ]; then
            loopback_aliases_array+=("$line")
        fi
    done <<< "$loopback_aliases"
    
    if [ ${#loopback_aliases_array[@]} -gt 0 ]; then
        for loopback_alias in "${loopback_aliases_array[@]}"; do
            SUDO_ASKPASS=$SSH_ASKPASS sudo --askpass ifconfig lo0 alias "$loopback_alias"
        done
    fi

    local ssh_output
    local ssh_exit_code

    # Check if it's a dynamic (SOCKS) or normal tunnel
    if [ "$tunnel_type" = "socks" ]; then
        ssh_output=$(ssh -${ssh_arguments}D "localhost:$localport" -i "$identity" -p "$port" "$user"@"$host" -F /dev/null -o ExitOnForwardFailure=yes -o ControlPath=none -o StrictHostKeyChecking=accept-new -o TCPKeepAlive=yes -o AddKeysToAgent=yes "${options_array[@]}" 2>&1)
        ssh_exit_code=$?
    elif [ "$tunnel_type" = "multiple" ]; then
        ssh_output=$(ssh -${ssh_arguments} "${tunnel_options_array[@]}" -i "$identity" -p "$port" "$user"@"$host" -F /dev/null -o ExitOnForwardFailure=yes -o ControlPath=none -o StrictHostKeyChecking=accept-new -o TCPKeepAlive=yes -o AddKeysToAgent=yes "${options_array[@]}" 2>&1)
        ssh_exit_code=$?
    else
        local remotehost=$(echo "$tunnel_data" | jq -r '.remotehost')
        local remoteport=$(echo "$tunnel_data" | jq -r '.remoteport')
        ssh_output=$(ssh -${ssh_arguments}L "localhost:$localport:$remotehost:$remoteport" -i "$identity" -p "$port" "$user"@"$host" -F /dev/null -o ExitOnForwardFailure=yes -o ControlPath=none -o StrictHostKeyChecking=accept-new -o TCPKeepAlive=yes -o AddKeysToAgent=yes "${options_array[@]}" 2>&1)
        ssh_exit_code=$?
    fi

    jq -r "(.\"$tunnel_name\").stopped = false" "$config_file" > "$config_file.tmp" && mv "$config_file.tmp" "$config_file"

    if [ $ssh_exit_code -ne 0 ]; then
        local dialog_content="The ssh tunnel connection failed\n\n${ssh_output}"
        dialog_content="${dialog_content//$'\n'/\n\n}" # double newlines
        dialog_content="${dialog_content//\"/\\\"}"  # replace double-quote with: \"
        osascript -e "display dialog \"$dialog_content\" with icon stop with title \"SSH Tunnel Error\" buttons {\"OK\"} default button \"OK\""
    fi
}

stop_tunnel() {

    killall 'System Events'

    local config_file="$1"
    local tunnel_name="$2"

    local tunnel_identifier=$(get_tunnel_identifier "$config_file" "$tunnel_name")

    pkill -f "ssh.*-${ssh_arguments}[LD ]+${tunnel_identifier}.*ExitOnForwardFailure=yes.*"

    jq -r "(.\"$tunnel_name\").stopped = true" "$config_file" > "$config_file.tmp" && mv "$config_file.tmp" "$config_file"
}

stop_all_tunnels() {

    killall 'System Events'

    local config_files=("$config_dir"/*.json)

    for config_file in "${config_files[@]}"; do
        local tunnels=($(jq -r 'keys[]' "$config_file"))

        for tunnel_name in "${tunnels[@]}"; do
            stop_tunnel $config_file $tunnel_name
        done
    done
}

tunnel_info() {
    local config_file="$1"
    local tunnel_name="$2"

    # Load config data from the specified file and tunnel
    local tunnel_data=$(jq -r ".\"$tunnel_name\"" "$config_file")
    local host=$(echo "$tunnel_data" | jq -r '.host')
    local user=$(echo "$tunnel_data" | jq -r '.user')
    local port=$(echo "$tunnel_data" | jq -r '.port')
    local identity=$(echo "$tunnel_data" | jq -r '.identity')
    local tunnel_type=$(echo "$tunnel_data" | jq -r '.tunnel_type')
    local localport=$(echo "$tunnel_data" | jq -r '.localport')
    local options=$(echo "$tunnel_data" | jq -r '.options | join(" ")')

    if [ "$tunnel_type" = "socks" ]; then
        # Create the dialog content
        local dialog_content="Tunnel Info: $tunnel_name\n\nType: $tunnel_type\nUser: $user\nHost: $host\nPort: $port\nLocal Port: $localport\nIdentity: $identity\nOptions:\n$options"

    elif [ "$tunnel_type" = "multiple" ]; then
        local tunnel_options=$(echo "$tunnel_data" | jq -r '.tunnel_options[]')
        local tunnel_options_array=()
        while IFS= read -r line; do
            tunnel_options_array+=("$line")
        done <<< "$tunnel_options"

        # Create the dialog content
        local dialog_content="Tunnel Info: $tunnel_name\n\nType: $tunnel_type\nUser: $user\nHost: $host\nPort: $port\nLocal Port: $localport\nIdentity: $identity\nOptions:\n$options\nTunnel Options:\n$tunnel_options"

    else
        local remotehost=$(echo "$tunnel_data" | jq -r '.remotehost')
        local remoteport=$(echo "$tunnel_data" | jq -r '.remoteport')

        # Create the dialog content
        local dialog_content="Tunnel Info: $tunnel_name\n\nType: $tunnel_type\nUser: $user\nHost: $host\nPort: $port\nLocal Port: $localport\nRemote Host: $remotehost\nRemote Port: $remoteport\nIdentity: $identity\nOptions:\n$options"
    fi

    # Show the dialog window using osascript
    osascript -e "display dialog \"$dialog_content\" with icon note with title \"SSH Tunnel Info\" buttons {\"OK\"} default button \"OK\""
}

toggle_autoconnect() {
    local config_file="$1"
    local tunnel_name="$2"

    # Load current autoconnect value
    local autoconnect=$(jq -r ".\"$tunnel_name\".autoconnect" "$config_file")
    
    # Toggle the value
    if [ "$autoconnect" = "true" ]; then
        autoconnect="false"
    else
        autoconnect="true"
    fi

    # Update the config file with the new value
    jq -r "(.\"$tunnel_name\").autoconnect = $autoconnect" "$config_file" > "$config_file.tmp" && mv "$config_file.tmp" "$config_file"
    jq -r "(.\"$tunnel_name\").autoconnect_count = 0" "$config_file" > "$config_file.tmp" && mv "$config_file.tmp" "$config_file"
}

# Function to display the menu in xbar
xbar_menu() {

    setopt +o nomatch
    local config_files=("$config_dir"/*.json)

    if [ "$config_files" = "$config_dir/*.json" ]; then
        config_files=""
    fi
    setopt -o nomatch

    echo "SSH Tunnels"
    echo "---"

    for config_file in "${config_files[@]}"; do
        local tunnels=($(jq -r 'keys[]' "$config_file"))

        for tunnel_name in "${tunnels[@]}"; do
            # Load config data from the specified file and tunnel
            local tunnel_data=$(jq -r ".\"$tunnel_name\"" "$config_file")
            local tunnel_status="ðŸ”´"   # Emoji: Red circle for offline tunnel

            local tunnel_identifier=$(get_tunnel_identifier "$config_file" "$tunnel_name")

            if pgrep -f "ssh.*-${ssh_arguments}[LD ]+${tunnel_identifier}.*ExitOnForwardFailure=yes.*" > /dev/null; then
                tunnel_status="ðŸŸ¢"   # Emoji: Green circle for running tunnel
            fi

            local connection_status="Connect"  # Default status
            local connection_action="start"

            if [ "$tunnel_status" = "ðŸŸ¢" ]; then
                connection_status="Disconnect"
                connection_action="stop"
            fi

            # Load current autoconnect value
            local autoconnect=$(echo "$tunnel_data" | jq -r '.autoconnect')
            local autoconnect_count=$(echo "$tunnel_data" | jq -r '.autoconnect_count')
            local stopped=$(echo "$tunnel_data" | jq -r '.stopped')

            # Toggle the value
            if [ "$autoconnect" = "true" ]; then
                local autoconnect_status="on"

                if [ "$connection_action" = "start" ] && [ "$stopped" != "true" ]; then
                    if [ $autoconnect_count -lt 2 ]; then

                        ((autoconnect_count++))
                        jq -r "(.\"$tunnel_name\").autoconnect_count = $autoconnect_count" "$config_file" > "$config_file.tmp" && mv "$config_file.tmp" "$config_file"

                        start_tunnel $config_file $tunnel_name
                    else
                        toggle_autoconnect $config_file $tunnel_name
                    fi
                fi
            else
                local autoconnect_status="off"
            fi

            echo "$tunnel_name $tunnel_status | bash='$current_script' param1=$connection_action param2=$config_file param3=$tunnel_name terminal=false refresh=true"
            echo "-- $connection_status | bash='$current_script' param1=$connection_action param2=$config_file param3=$tunnel_name terminal=false refresh=true"
            echo "-- Auto reconnect $autoconnect_status | bash='$current_script' param1=toggle_autoconnect param2=$config_file param3=$tunnel_name terminal=false refresh=true"
            echo "-- Info | bash='$current_script' param1=tunnel_info param2=$config_file param3=$tunnel_name terminal=false"
        done
    done

    echo "---"
    echo "Disconnect All | bash='$current_script' param1=stop_all terminal=false"

    echo "---"
    echo "Reset ssh-askpass | bash='killall' param1='System Events' terminal=false"

    echo "---"
    echo "$SSH_TUNNEL_MGR_VERSION ($SSH_TUNNEL_MGR_CPU_MODE)"
}

# Main function
main() {
    local action="$1"

    case "$action" in
        start)
            local config_file="$2"
            local tunnel_name="$3"
            start_tunnel "$config_file" "$tunnel_name"
            ;;
        stop)
            local config_file="$2"
            local tunnel_name="$3"
            stop_tunnel "$config_file" "$tunnel_name"
            ;;
        stop_all)
            stop_all_tunnels
            ;;
        tunnel_info)
            local config_file="$2"
            local tunnel_name="$3"
            tunnel_info "$config_file" "$tunnel_name"
            ;;
        toggle_autoconnect)
            local config_file="$2"
            local tunnel_name="$3"
            toggle_autoconnect "$config_file" "$tunnel_name"
            ;;
        *)
            xbar_menu
            ;;
    esac
}

# Execute main function
main "$@"
